// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_Layer_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_map_Monsterpath_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_Monsterpath_Coordinate_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_TileMapEntry_DoNotUse_map_2eproto;
namespace towerdefense {
class map_LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_Layer> _instance;
} _map_Layer_default_instance_;
class map_Monsterpath_CoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_Monsterpath_Coordinate> _instance;
} _map_Monsterpath_Coordinate_default_instance_;
class map_MonsterpathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_Monsterpath> _instance;
} _map_Monsterpath_default_instance_;
class map_TileMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_TileMapEntry_DoNotUse> _instance;
} _map_TileMapEntry_DoNotUse_default_instance_;
class mapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map> _instance;
} _map_default_instance_;
}  // namespace towerdefense
static void InitDefaultsscc_info_map_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::towerdefense::_map_default_instance_;
    new (ptr) ::towerdefense::map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::towerdefense::map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_map_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_map_map_2eproto}, {
      &scc_info_map_Layer_map_2eproto.base,
      &scc_info_map_TileMapEntry_DoNotUse_map_2eproto.base,
      &scc_info_map_Monsterpath_map_2eproto.base,}};

static void InitDefaultsscc_info_map_Layer_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::towerdefense::_map_Layer_default_instance_;
    new (ptr) ::towerdefense::map_Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::towerdefense::map_Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_Layer_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_map_Layer_map_2eproto}, {}};

static void InitDefaultsscc_info_map_Monsterpath_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::towerdefense::_map_Monsterpath_default_instance_;
    new (ptr) ::towerdefense::map_Monsterpath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::towerdefense::map_Monsterpath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_map_Monsterpath_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_map_Monsterpath_map_2eproto}, {
      &scc_info_map_Monsterpath_Coordinate_map_2eproto.base,}};

static void InitDefaultsscc_info_map_Monsterpath_Coordinate_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::towerdefense::_map_Monsterpath_Coordinate_default_instance_;
    new (ptr) ::towerdefense::map_Monsterpath_Coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::towerdefense::map_Monsterpath_Coordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_Monsterpath_Coordinate_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_map_Monsterpath_Coordinate_map_2eproto}, {}};

static void InitDefaultsscc_info_map_TileMapEntry_DoNotUse_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::towerdefense::_map_TileMapEntry_DoNotUse_default_instance_;
    new (ptr) ::towerdefense::map_TileMapEntry_DoNotUse();
  }
  ::towerdefense::map_TileMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_map_TileMapEntry_DoNotUse_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_map_TileMapEntry_DoNotUse_map_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Layer, tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Monsterpath_Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Monsterpath_Coordinate, x_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Monsterpath_Coordinate, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Monsterpath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_Monsterpath, checkpoints_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_TileMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_TileMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_TileMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map_TileMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, layers_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, resources_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, tile_map_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, width_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, height_),
  PROTOBUF_FIELD_OFFSET(::towerdefense::map, paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::towerdefense::map_Layer)},
  { 6, -1, sizeof(::towerdefense::map_Monsterpath_Coordinate)},
  { 13, -1, sizeof(::towerdefense::map_Monsterpath)},
  { 19, 26, sizeof(::towerdefense::map_TileMapEntry_DoNotUse)},
  { 28, -1, sizeof(::towerdefense::map)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::towerdefense::_map_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::towerdefense::_map_Monsterpath_Coordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::towerdefense::_map_Monsterpath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::towerdefense::_map_TileMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::towerdefense::_map_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmap.proto\022\014towerdefense\"\223\003\n\003map\022\'\n\006lay"
  "ers\030\001 \003(\0132\027.towerdefense.map.Layer\022*\n\tre"
  "sources\030\002 \001(\0132\027.towerdefense.map.Layer\0220"
  "\n\010tile_map\030\003 \003(\0132\036.towerdefense.map.Tile"
  "MapEntry\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022"
  ",\n\005paths\030\006 \003(\0132\035.towerdefense.map.Monste"
  "rpath\032\026\n\005Layer\022\r\n\005tiles\030\001 \003(\r\032p\n\013Monster"
  "path\022=\n\013checkpoints\030\001 \003(\0132(.towerdefense"
  ".map.Monsterpath.Coordinate\032\"\n\nCoordinat"
  "e\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032.\n\014TileMapEntry\022"
  "\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[5] = {
  &scc_info_map_map_2eproto.base,
  &scc_info_map_Layer_map_2eproto.base,
  &scc_info_map_Monsterpath_map_2eproto.base,
  &scc_info_map_Monsterpath_Coordinate_map_2eproto.base,
  &scc_info_map_TileMapEntry_DoNotUse_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 439,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 5, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace towerdefense {

// ===================================================================

void map_Layer::InitAsDefaultInstance() {
}
class map_Layer::_Internal {
 public:
};

map_Layer::map_Layer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:towerdefense.map.Layer)
}
map_Layer::map_Layer(const map_Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:towerdefense.map.Layer)
}

void map_Layer::SharedCtor() {
}

map_Layer::~map_Layer() {
  // @@protoc_insertion_point(destructor:towerdefense.map.Layer)
  SharedDtor();
}

void map_Layer::SharedDtor() {
}

void map_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_Layer& map_Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_Layer_map_2eproto.base);
  return *internal_default_instance();
}


void map_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:towerdefense.map.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  _internal_metadata_.Clear();
}

const char* map_Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tiles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_tiles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_Layer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:towerdefense.map.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 tiles = 1;
  {
    int byte_size = _tiles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_tiles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:towerdefense.map.Layer)
  return target;
}

size_t map_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:towerdefense.map.Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tiles = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tiles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tiles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:towerdefense.map.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const map_Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:towerdefense.map.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:towerdefense.map.Layer)
    MergeFrom(*source);
  }
}

void map_Layer::MergeFrom(const map_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:towerdefense.map.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
}

void map_Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:towerdefense.map.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_Layer::CopyFrom(const map_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:towerdefense.map.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_Layer::IsInitialized() const {
  return true;
}

void map_Layer::InternalSwap(map_Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata map_Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void map_Monsterpath_Coordinate::InitAsDefaultInstance() {
}
class map_Monsterpath_Coordinate::_Internal {
 public:
};

map_Monsterpath_Coordinate::map_Monsterpath_Coordinate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:towerdefense.map.Monsterpath.Coordinate)
}
map_Monsterpath_Coordinate::map_Monsterpath_Coordinate(const map_Monsterpath_Coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:towerdefense.map.Monsterpath.Coordinate)
}

void map_Monsterpath_Coordinate::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

map_Monsterpath_Coordinate::~map_Monsterpath_Coordinate() {
  // @@protoc_insertion_point(destructor:towerdefense.map.Monsterpath.Coordinate)
  SharedDtor();
}

void map_Monsterpath_Coordinate::SharedDtor() {
}

void map_Monsterpath_Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_Monsterpath_Coordinate& map_Monsterpath_Coordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_Monsterpath_Coordinate_map_2eproto.base);
  return *internal_default_instance();
}


void map_Monsterpath_Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:towerdefense.map.Monsterpath.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* map_Monsterpath_Coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_Monsterpath_Coordinate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:towerdefense.map.Monsterpath.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:towerdefense.map.Monsterpath.Coordinate)
  return target;
}

size_t map_Monsterpath_Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:towerdefense.map.Monsterpath.Coordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_Monsterpath_Coordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:towerdefense.map.Monsterpath.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const map_Monsterpath_Coordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_Monsterpath_Coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:towerdefense.map.Monsterpath.Coordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:towerdefense.map.Monsterpath.Coordinate)
    MergeFrom(*source);
  }
}

void map_Monsterpath_Coordinate::MergeFrom(const map_Monsterpath_Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:towerdefense.map.Monsterpath.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void map_Monsterpath_Coordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:towerdefense.map.Monsterpath.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_Monsterpath_Coordinate::CopyFrom(const map_Monsterpath_Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:towerdefense.map.Monsterpath.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_Monsterpath_Coordinate::IsInitialized() const {
  return true;
}

void map_Monsterpath_Coordinate::InternalSwap(map_Monsterpath_Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata map_Monsterpath_Coordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void map_Monsterpath::InitAsDefaultInstance() {
}
class map_Monsterpath::_Internal {
 public:
};

map_Monsterpath::map_Monsterpath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:towerdefense.map.Monsterpath)
}
map_Monsterpath::map_Monsterpath(const map_Monsterpath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      checkpoints_(from.checkpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:towerdefense.map.Monsterpath)
}

void map_Monsterpath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_map_Monsterpath_map_2eproto.base);
}

map_Monsterpath::~map_Monsterpath() {
  // @@protoc_insertion_point(destructor:towerdefense.map.Monsterpath)
  SharedDtor();
}

void map_Monsterpath::SharedDtor() {
}

void map_Monsterpath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_Monsterpath& map_Monsterpath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_Monsterpath_map_2eproto.base);
  return *internal_default_instance();
}


void map_Monsterpath::Clear() {
// @@protoc_insertion_point(message_clear_start:towerdefense.map.Monsterpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoints_.Clear();
  _internal_metadata_.Clear();
}

const char* map_Monsterpath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .towerdefense.map.Monsterpath.Coordinate checkpoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_Monsterpath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:towerdefense.map.Monsterpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .towerdefense.map.Monsterpath.Coordinate checkpoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_checkpoints_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_checkpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:towerdefense.map.Monsterpath)
  return target;
}

size_t map_Monsterpath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:towerdefense.map.Monsterpath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .towerdefense.map.Monsterpath.Coordinate checkpoints = 1;
  total_size += 1UL * this->_internal_checkpoints_size();
  for (const auto& msg : this->checkpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_Monsterpath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:towerdefense.map.Monsterpath)
  GOOGLE_DCHECK_NE(&from, this);
  const map_Monsterpath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_Monsterpath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:towerdefense.map.Monsterpath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:towerdefense.map.Monsterpath)
    MergeFrom(*source);
  }
}

void map_Monsterpath::MergeFrom(const map_Monsterpath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:towerdefense.map.Monsterpath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkpoints_.MergeFrom(from.checkpoints_);
}

void map_Monsterpath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:towerdefense.map.Monsterpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_Monsterpath::CopyFrom(const map_Monsterpath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:towerdefense.map.Monsterpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_Monsterpath::IsInitialized() const {
  return true;
}

void map_Monsterpath::InternalSwap(map_Monsterpath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkpoints_.InternalSwap(&other->checkpoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata map_Monsterpath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

map_TileMapEntry_DoNotUse::map_TileMapEntry_DoNotUse() {}
map_TileMapEntry_DoNotUse::map_TileMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void map_TileMapEntry_DoNotUse::MergeFrom(const map_TileMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata map_TileMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void map_TileMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void map::InitAsDefaultInstance() {
  ::towerdefense::_map_default_instance_._instance.get_mutable()->resources_ = const_cast< ::towerdefense::map_Layer*>(
      ::towerdefense::map_Layer::internal_default_instance());
}
class map::_Internal {
 public:
  static const ::towerdefense::map_Layer& resources(const map* msg);
};

const ::towerdefense::map_Layer&
map::_Internal::resources(const map* msg) {
  return *msg->resources_;
}
map::map()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:towerdefense.map)
}
map::map(const map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      layers_(from.layers_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tile_map_.MergeFrom(from.tile_map_);
  if (from._internal_has_resources()) {
    resources_ = new ::towerdefense::map_Layer(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:towerdefense.map)
}

void map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_map_map_2eproto.base);
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(height_));
}

map::~map() {
  // @@protoc_insertion_point(destructor:towerdefense.map)
  SharedDtor();
}

void map::SharedDtor() {
  if (this != internal_default_instance()) delete resources_;
}

void map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map& map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_map_2eproto.base);
  return *internal_default_instance();
}


void map::Clear() {
// @@protoc_insertion_point(message_clear_start:towerdefense.map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  tile_map_.Clear();
  paths_.Clear();
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .towerdefense.map.Layer layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .towerdefense.map.Layer resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, string> tile_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tile_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .towerdefense.map.Monsterpath paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:towerdefense.map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .towerdefense.map.Layer layers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_layers(i), target, stream);
  }

  // .towerdefense.map.Layer resources = 2;
  if (this->has_resources()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::resources(this), target, stream);
  }

  // map<uint32, string> tile_map = 3;
  if (!this->_internal_tile_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "towerdefense.map.TileMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tile_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tile_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_tile_map().begin();
          it != this->_internal_tile_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = map_TileMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_tile_map().begin();
          it != this->_internal_tile_map().end(); ++it) {
        target = map_TileMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // repeated .towerdefense.map.Monsterpath paths = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:towerdefense.map)
  return target;
}

size_t map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:towerdefense.map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .towerdefense.map.Layer layers = 1;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, string> tile_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tile_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
      it = this->_internal_tile_map().begin();
      it != this->_internal_tile_map().end(); ++it) {
    total_size += map_TileMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .towerdefense.map.Monsterpath paths = 6;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .towerdefense.map.Layer resources = 2;
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:towerdefense.map)
  GOOGLE_DCHECK_NE(&from, this);
  const map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:towerdefense.map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:towerdefense.map)
    MergeFrom(*source);
  }
}

void map::MergeFrom(const map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:towerdefense.map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  tile_map_.MergeFrom(from.tile_map_);
  paths_.MergeFrom(from.paths_);
  if (from.has_resources()) {
    _internal_mutable_resources()->::towerdefense::map_Layer::MergeFrom(from._internal_resources());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:towerdefense.map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map::CopyFrom(const map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:towerdefense.map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map::IsInitialized() const {
  return true;
}

void map::InternalSwap(map* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  layers_.InternalSwap(&other->layers_);
  tile_map_.Swap(&other->tile_map_);
  paths_.InternalSwap(&other->paths_);
  swap(resources_, other->resources_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata map::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace towerdefense
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::towerdefense::map_Layer* Arena::CreateMaybeMessage< ::towerdefense::map_Layer >(Arena* arena) {
  return Arena::CreateInternal< ::towerdefense::map_Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::towerdefense::map_Monsterpath_Coordinate* Arena::CreateMaybeMessage< ::towerdefense::map_Monsterpath_Coordinate >(Arena* arena) {
  return Arena::CreateInternal< ::towerdefense::map_Monsterpath_Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::towerdefense::map_Monsterpath* Arena::CreateMaybeMessage< ::towerdefense::map_Monsterpath >(Arena* arena) {
  return Arena::CreateInternal< ::towerdefense::map_Monsterpath >(arena);
}
template<> PROTOBUF_NOINLINE ::towerdefense::map_TileMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::towerdefense::map_TileMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::towerdefense::map_TileMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::towerdefense::map* Arena::CreateMaybeMessage< ::towerdefense::map >(Arena* arena) {
  return Arena::CreateInternal< ::towerdefense::map >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
